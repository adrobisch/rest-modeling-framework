main(api, id, readme) ::= <<
{
    "info": {
        "_postman_id": "<id>",
        "name": "commercetools platform API (generated)",
        "description": "<readme; format="jsonescape">",
        "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
    },
    "item": [
        <api.resources: {r|<folder(api.oAuth, r)>}; separator=",">
    ]
}
>>

folder(oauth, resource) ::=<<

{
    "name": "<resource.name>",
    "description": "<resource.description>",
    "item": [
        <resource.items: {item |<(item.template)(oauth, item)>}; separator=",">
    ]
}
>>

query(oauth, item) ::=<<

{
    "name": "Query <item.name>",
    "event": [
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "tests[\"Status code is 200\"] = responseCode.code === 200;",
                    "var data = JSON.parse(responseBody);",
                    "if(data.results && data.results[0] && data.results[0].id && data.results[0].version){",
                    "    postman.setEnvironmentVariable(\"<item.resource.resourcePathName; format="singularize">-id\", data.results[0].id); ",
                    "    postman.setEnvironmentVariable(\"<item.resource.resourcePathName; format="singularize">-version\", data.results[0].version);",
                    "}",
                    "if(data.results && data.results[0] && data.results[0].key){",
                    "    postman.setEnvironmentVariable(\"<item.resource.resourcePathName; format="singularize">-key\", data.results[0].key); ",
                    "}"
                ]
            }
        }
    ],
    "request": {
        "auth": <auth(oauth)>,
        "method": "<item.method.methodName; format="uppercase">",
        "header": [
            {
                "key": "Content-Type",
                "value": "application/json"
            }
        ],
        "body": {
            "mode": "raw",
            "raw": ""
        },
        "url": {
            "raw": "{{host}}/{{projectKey}}<item.resource.relativeUri.template>",
            "host": [
                "{{host}}"
            ],
            "path": [
                "{{projectKey}}",
                "<item.resource.resourcePathName>"
            <if (item.method.queryParameters)>
            ],
            "query": [
                <item.method.queryParameters: {param |<queryParam(param)>}; separator=",">
            <endif>
            ]
        },
        "description": "<item.description>"
    },
    "response": []
}
>>

queryParam(param) ::=<<

{
    "key": "<param.name>",
    "value": "",
    "equals": true,
    "disabled": true
}
>>

create(oauth, item) ::=<<

{
    "name": "Create <item.name; format="singularize">",
    "event": [
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    <test(item, false)>
                ]
            }
        }
    ],
    "request": {
        "auth": <auth(oauth)>,
        "method": "<item.method.methodName; format="uppercase">",
        "header": [
            {
                "key": "Content-Type",
                "value": "application/json"
            }
        ],
        "body": {
            "mode": "raw",
            "raw": ""
        },
        "url": {
            "raw": "{{host}}/{{projectKey}}<item.resource.relativeUri.template>",
            "host": [
                "{{host}}"
            ],
            "path": [
                "{{projectKey}}",
                "<item.resource.resourcePathName>"
            <if (item.method.queryParameters)>
            ],
            "query": [
                <item.method.queryParameters: {param |<queryParam(param)>}; separator=",">
            <endif>
            ]
        },
        "description": "<item.description>"
    },
    "response": []
}
>>

getByID(oauth, item) ::=<<
<getByParam(oauth, item, false)>
>>

getByKey(oauth, item) ::=<<
<getByParam(oauth, item, "key")>
>>

getByParam(oauth, item, param) ::=<<
{
    "name": "Get <item.name; format="singularize"> by <if(param)><param><else>ID<endif>",
    "event": [
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    <test(item, param)>
                ]
            }
        }
    ],
    "request": {
        "auth": <auth(oauth)>,
        "method": "<item.method.methodName; format="uppercase">",
        "header": [
            {
                "key": "Content-Type",
                "value": "application/json"
            }
        ],
        "body": {
            "mode": "raw",
            "raw": ""
        },
        "url": {
            <if (param)>
            "raw": "{{host}}/{{projectKey}}<item.resource.relativeUri.template>/<param>={{<item.resource.resourcePathName; format="singularize">-<param>}}",
            <else>
            "raw": "{{host}}/{{projectKey}}<item.resource.relativeUri.template>/{{<item.resource.resourcePathName; format="singularize">-id}}",
            <endif>
            "host": [
                "{{host}}"
            ],
            "path": [
                "{{projectKey}}",
                "<item.resource.resourcePathName>",
                <if (param)>
                "<param>={{<item.resource.resourcePathName; format="singularize">-<param>}}"
                <else>
                "{{<item.resource.resourcePathName; format="singularize">-id}}"
                <endif>
            <if (item.method.queryParameters)>
            ],
            "query": [
                <item.method.queryParameters: {param |<queryParam(param)>}; separator=",">
            <endif>
            ]
        },
        "description": "<item.description>"
    },
    "response": []
}
>>

updateByID(oauth, item) ::=<<
<updateByParam(oauth, item, false)>
>>

updateByKey(oauth, item) ::=<<
<updateByParam(oauth, item, "key")>
>>

updateByParam(oauth, item, param) ::=<<
{
    "name": "Update <item.name; format="singularize"> by <if(param)><param><else>ID<endif>",
    "event": [
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    <test(item, param)>
                ]
            }
        }
    ],
    "request": {
        "auth": <auth(oauth)>,
        "method": "<item.method.methodName; format="uppercase">",
        "header": [
            {
                "key": "Content-Type",
                "value": "application/json"
            }
        ],
        "body": {
            "mode": "raw",
            "raw": ""
        },
        "url": {
            <if (param)>
            "raw": "{{host}}/{{projectKey}}<item.resource.relativeUri.template>/<param>={{<item.resource.resourcePathName; format="singularize">-<param>}}",
            <else>
            "raw": "{{host}}/{{projectKey}}<item.resource.relativeUri.template>/{{<item.resource.resourcePathName; format="singularize">-id}}",
            <endif>
            "host": [
                "{{host}}"
            ],
            "path": [
                "{{projectKey}}",
                "<item.resource.resourcePathName>",
                <if (param)>
                "<param>={{<item.resource.resourcePathName; format="singularize">-<param>}}"
                <else>
                "{{<item.resource.resourcePathName; format="singularize">-id}}"
                <endif>
            <if (item.method.queryParameters)>
            ],
            "query": [
                <item.method.queryParameters: {param |<queryParam(param)>}; separator=",">
            <endif>
            ]
        },
        "description": "<item.description>"
    },
    "response": []
}
>>

deleteByID(oauth, item) ::=<<
<deleteByParam(oauth, item, false)>
>>

deleteByKey(oauth, item) ::=<<
<deleteByParam(oauth, item, "key")>
>>

deleteByParam(oauth, item, param) ::=<<
{
    "name": "Delete <item.name; format="singularize"> by <if(param)><param><else>ID<endif>",
    "event": [
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    <test(item, param)>
                ]
            }
        }
    ],
    "request": {
        "auth": <auth(oauth)>,
        "method": "<item.method.methodName; format="uppercase">",
        "header": [
            {
                "key": "Content-Type",
                "value": "application/json"
            }
        ],
        "body": {
            "mode": "raw",
            "raw": ""
        },
        "url": {
            <if (param)>
            "raw": "{{host}}/{{projectKey}}<item.resource.relativeUri.template>/<param>={{<item.resource.resourcePathName; format="singularize">-<param>}}",
            <else>
            "raw": "{{host}}/{{projectKey}}<item.resource.relativeUri.template>/{{<item.resource.resourcePathName; format="singularize">-id}}",
            <endif>
            "host": [
                "{{host}}"
            ],
            "path": [
                "{{projectKey}}",
                "<item.resource.resourcePathName>",
                <if (param)>
                "<param>={{<item.resource.resourcePathName; format="singularize">-<param>}}"
                <else>
                "{{<item.resource.resourcePathName; format="singularize">-id}}"
                <endif>
            <if (item.method.queryParameters)>
            ],
            "query": [
                <item.method.queryParameters: {param |<queryParam(param)>}; separator=",">
            <endif>
            ]
        },
        "description": "<item.description>"
    },
    "response": []
}
>>

action(oauth, action) ::=<<
{
    "name": "<action.type.discriminatorValue; format="capitalize">",
    "event": [
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    <test(item, false)>
                ]
            }
        }
    ],
    "request": {
        "auth": <auth(oauth)>,
        "method": "<item.method.methodName; format="uppercase">",
        "body": {
            "mode": "raw",
            "raw": "{\n  \"version\": {{<item.resource.resourcePathName; format="singularize">-version}},\n  \"actions\": [<if (item.example)><item.example><else>{\n    \"action\": \"<action.type.discriminatorValue>\"\n  }<endif>]\n}"
        },
        "url": {
            "raw": "{{host}}/{{projectKey}}/<item.resource.relativeUri.template>/{{<item.resource.resourcePathName; format="singularize">-id}}",
            "host": [
                "{{host}}"
            ],
            "path": [
                "{{projectKey}}",
                "<item.resource.resourcePathName>",
                "{{<item.resource.resourcePathName; format="singularize">-id}}"
            <if (item.method.queryParameters)>
            ],
            "query": [
                <item.method.queryParameters: {param |<queryParam(param)>}; separator=",">
            <endif>
            ]
        },
        "description": "<item.description>"
    },
    "response": []
}
>>

test(item, param) ::=<<
"tests[\"Status code \" + responseCode.code] = responseCode.code === 200 || responseCode.code === 201;",
"var data = JSON.parse(responseBody);",
"if(data.id && data.version){",
"    postman.setEnvironmentVariable(\"<item.resource.resourcePathName; format="singularize">-id\", data.id); ",
"    postman.setEnvironmentVariable(\"<item.resource.resourcePathName; format="singularize">-version\", data.version);",
"}",
"if(data.key){",
"    postman.setEnvironmentVariable(\"<item.resource.resourcePathName; format="singularize">-key\", data.key); ",
<if (param)>
"}",
"if(data.<param>){",
"    postman.setEnvironmentVariable(\"<item.resource.resourcePathName; format="singularize">-<param>\", data.<param>); ",
<endif>
"}"

>>

auth(oauth) ::=<<

{
    "type": "oauth2",
    "oauth2": {
        "accessTokenUrl": "https://{{auth_url}}<oauth.uri.path>",
        "grantType": "client_credentials",
        "addTokenTo": "header"
    }
}
>>
