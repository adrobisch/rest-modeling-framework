import "../../../generic.stg"

main(vendorName) ::=<<
\<?php
<generatorInfo()>

namespace <vendorName>\Client;

use <vendorName>\Base\JsonObject;
use <vendorName>\Base\ResultMapper;
use GuzzleHttp\Psr7\Request;
use Psr\Http\Message\ResponseInterface;
use GuzzleHttp\Psr7;

class ApiRequest extends Request
{
    const RESULT_TYPE = JsonObject::class;

    private $queryParts;
    private $query;

    /**
     * @inheritDoc
     */
    public function __construct($method, $uri, array $headers = [], $body = null, $version = '1.1')
    {
        $headers = $this->ensureHeader($headers, 'Content-Type', 'application/json');

        parent::__construct($method, $uri, $headers, $body, $version);
    }

    protected function ensureHeader(array $headers, $header, $defaultValue)
    {
        $normalizedHeader = strtolower($header);
        foreach ($headers as $header => $value) {
            $normalized = strtolower($header);
            if ($normalized !== $normalizedHeader) {
                continue;
            }
            return $headers;
        }
        $headers[$header] = $defaultValue;

        return $headers;
    }

    public function map(ResponseInterface $response)
    {
        return ResultMapper::mapResponseToClass(static::RESULT_TYPE, $response);
    }

    public function withQueryParam($parameterName, $value)
    {
        $query = $this->getUri()->getQuery();
        if ($this->query !== $query) {
            $this->queryParts = Psr7\parse_query($query);
        }
        if (isset($this->queryParts[$parameterName]) && !is_array($this->queryParts[$parameterName])) {
            $this->queryParts[$parameterName] = [$this->queryParts[$parameterName]];
        }
        $this->queryParts[$parameterName][] = $value;
        ksort($this->queryParts);
        $this->query = Psr7\build_query($this->queryParts);

        return $this->withUri($this->getUri()->withQuery($this->query));
    }
}

>>
