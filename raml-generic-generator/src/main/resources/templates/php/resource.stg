import "generic.stg"

builder(vendorName, resource) ::=<<
\<?php
<generatorInfo()>

namespace <vendorName>\\<resource.package.name>;

use <vendorName>\\Client\\Resource;
use <vendorName>\\Client\\ApiRequest;

class RequestBuilder extends Resource
{
    public function __construct()
    {
        parent::__construct('');
    }

    <resource.resources: {r |<resourceMethod(r)>}>

    /**
     * @param string $method
     * @param string $uri
     * @param array $headers
     * @param $body
     * @param string $version
     * @return ApiRequest
     */
    final public function buildCustom($method, $uri, array $headers = [], $body = null, $version = '1.1')
    {
        return new ApiRequest($method, $uri, $headers, $body, $version);
    }

}

>>

request(vendorName, package, requestName, method, returnType, returnPackage, absoluteUri, params, fileBody) ::=<<
\<?php
<generatorInfo()>

namespace <vendorName>\\<package; format="capitalize">;

use <vendorName>\\Client\\ApiRequest;
<if(returnType)>
use <vendorName>\\Types\\<returnPackage><returnType.name>;
<else>
use <vendorName>\\Base\\JsonObject;
<endif>

use <vendorName>\\Base\\ResultMapper;
use Psr\Http\Message\ResponseInterface;
<method; format="useBody">

class <requestName> extends ApiRequest
{
    const RESULT_TYPE = <if(returnType)><returnType.name><else>JsonObject<endif>::class;

    /**
     <params: {p |<paramBlock(p)>}>
     * @param $body
     * @param array $headers
     */
    public function __construct(<params: {p |$<p.key>, }><method; format="bodyType">$body<method; format="optionalBody">, array $headers = [])
    {
        $uri = sprintf('<absoluteUri; format="sprintf">'<params: {p |, $<p.key>}>);
        <method; format="ensureHeader">
        parent::__construct('<method.method>', $uri, $headers, <method; format="serialize">);
    }

    /**
     * @param ResponseInterface $response
     * @return <if(returnType)><returnType.name><else>JsonObject<endif>
     */
    public function map(ResponseInterface $response, ResultMapper $mapper)
    {
        return parent::map($response, $mapper);
    }

    <if(method.queryParameters)>
    <method.queryParameters: {param |<withParam(requestName, param)>}>
    <endif>
}

>>

paramBlock(param) ::=<<

* @param $<param.key>
>>
withParam(requestName, parameter) ::=<<
/**
 * @param <parameter; format="paramName">
 * @return <requestName>
 */
public function <parameter; format="methodName">(<parameter; format="methodParam">)
{
    return $this->withQueryParam(<parameter; format="template">, <parameter; format="paramName">);
}

>>

resource(vendorName, resource) ::=<<
\<?php
<generatorInfo()>

namespace <vendorName>\\<resource.package.name>;

use <vendorName>\\Client\\Resource;
<resource.methods: {m |<methodUse(m)>}>

class Resource<resource.index> extends Resource
{
    <if(resource.resources)>
    <resource.resources: {r |<resourceMethod(r)>}>
    <endif>

    <resource.methods: {m |<(m.method)(m, resource.allParams)>}>
}

>>

methodUse(method) ::=<<

<method; format="useBody">
>>

resourceMethod(resource) ::=<<
/**
 * @return Resource<resource.index>
 */
public function <resource.relativeUri; format="methodName">(<if(resource.hasParams)>$<resource.relativeUri; format="params"><endif>) {
    <if(resource.hasParams)>$args = array_merge($this->getArgs(), [<resource.relativeUri; format="paramArray">]);<endif>
    return new Resource<resource.index>($this->getUri() . '<resource.relativeUri>', <if(resource.hasParams)>$args<else>$this->getArgs()<endif>);
}

>>

get(method, params) ::=<<
/**
 * @return <method; format="requestName">
 */
public function <method.method>() {
    $args = $this->getArgs();
    return new <method; format="requestName">(<trunc(params): {p|$args['<p.key>'], }><last(params): {p|$args['<p.key>']}>);
}

>>

post(method, params) ::=<<
/**
 * @param <method; format="bodyType">$body
 * @return <method; format="requestName">
 */
public function <method.method>(<method; format="bodyType">$body) {
    $args = $this->getArgs();
    return new <method; format="requestName">(<trunc(params): {p|$args['<p.key>'], }><last(params): {p|$args['<p.key>']}>, $body);
}

>>

delete(method, params) ::=<<
/**
 * @return <method; format="requestName">
 */
public function <method.method>() {
    $args = $this->getArgs();
    return new <method; format="requestName">(<trunc(params): {p|$args['<p.key>'], }><last(params): {p|$args['<p.key>']}>);
}

>>
