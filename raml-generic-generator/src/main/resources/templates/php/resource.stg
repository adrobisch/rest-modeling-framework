import "generic.stg"

builder(vendorName, resource) ::=<<
\<?php
<generatorInfo()>

namespace <vendorName>\\<resource.package.parts; separator="\\">;

use <vendorName>\\Base\\Mapper;
use <vendorName>\\Client\\Resource;
use <vendorName>\\Client\\ApiRequest;

class RequestBuilder extends Resource
{
    public function __construct(array $args = [], Mapper $mapper = null)
    {
        parent::__construct('', $args, $mapper);
    }

    <resource.resources: {r |<resourceMethod(r)>}>

    /**
     * @param string $method
     * @param string $uri
     * @param array $headers
     * @param $body
     * @param string $version
     * @return ApiRequest
     */
    final public function buildCustom(
        string $method,
        string $uri,
        array $headers = [],
        $body = null,
        string $version = '1.1'
    ): ApiRequest {
        return new ApiRequest($method, $uri, $headers, $body, $version);
    }

}

>>

request(vendorName, request) ::=<<
\<?php
<generatorInfo()>

namespace <vendorName>\\<request.package.parts; separator="\\">;

use <vendorName>\\Client\\ApiRequest;
<if(first(request.returnType.oneOf).isClass)>
<useTypeImport(vendorName, first(request.returnType.oneOf).import)>
<else>
<if(request.returnType.isClass)>
<useTypeImport(vendorName, request.returnType.import)>
<else>
use <vendorName>\\Base\\JsonObject;
<endif>
<endif>

use <vendorName>\\Base\\ResultMapper;
use Psr\Http\Message\ResponseInterface;
<if (request.bodyImport)><useTypeImport(vendorName, request.bodyImport)><endif>

class <request.name> extends ApiRequest
{
    const RESULT_TYPE = <returnType(request.returnType)>::class;

    /**
     <request.allParams: {p |<paramBlock(p)>}>
     * @param $body
     * @param array $headers
     */
    public function __construct(<request.allParamNames: {name |$<name>, }><request.bodyType>$body<request.method; format="optionalBody">, array $headers = [])
    {
        $uri = str_replace([<request.allParamNames: {name |'{<name>\}'}; separator=", ">], [<request.allParamNames: {name |$<name>}; separator=", ">], '<request.absoluteUri.template>');
        <request.method; format="ensureHeader">
        parent::__construct('<request.method.method>', $uri, $headers, <request.method; format="serialize">);
    }

    /**
     * @param ResponseInterface $response
     * @param ResultMapper $mapper
     * @return <returnType(request.returnType)>
     */
    public function map(ResponseInterface $response, ResultMapper $mapper):  <returnType(request.returnType)>
    {
        return parent::map($response, $mapper);
    }

    <if(request.method.queryParameters)>
    <request.method.queryParameters: {param |<withParam(request.name, param)>}>
    <endif>
}

>>

returnType(returnType) ::=<<
<if(first(returnType.oneOf).isClass)><first(returnType.oneOf).typeName><else><if(returnType.isClass)><returnType.typeName><else>JsonObject<endif><endif>
>>
paramBlock(param) ::=<<

* @param $<param.key>
>>
withParam(requestName, parameter) ::=<<
/**
 * @param <parameter; format="paramName">
 * @return <requestName>
 */
public function <parameter; format="methodName">(<parameter; format="methodParam">): <requestName>
{
    return $this->withQueryParam(<parameter; format="template">, <parameter; format="paramName">);
}

>>

resource(vendorName, resource) ::=<<
\<?php
<generatorInfo()>

namespace <vendorName>\\<resource.package.parts; separator="\\">;

use <vendorName>\\Client\\Resource;
<if (resource.updateBuilder)>
use <vendorName>\Base\MapperAware;
use <vendorName>\Exception\InvalidArgumentException;
<resource.updateBuilder.builderImports: {bi |<useTypeImport(vendorName, bi)>}>
<endif>
<resource.methods: {m |<methodUse(m)>}>

class Resource<resource.index> extends Resource
{
    <if(resource.resources)>
    <resource.resources: {r |<resourceMethod(r)>}>
    <endif>

    <resource.methods: {m |<(m.method.method)(m)>}>
    <if(resource.updateBuilder)>

    /**
     * @param <resource.updateBuilder.resourceType.name> $<resource.updateBuilder.resourceType.name; format="lowercamel">
     * @return <resource.updateBuilder.updateType.name>Builder
     */
    public function update(<resource.updateBuilder.resourceType.name> $<resource.updateBuilder.resourceType.name; format="lowercamel">): <resource.updateBuilder.updateType.name>Builder
    {
        $builder = new <resource.updateBuilder.updateType.name>Builder(function(<resource.updateBuilder.updateType.name>Builder $builder) { return $this<if(resource.updateBuilder.hasId)>-><resource.updateBuilder.idMethod.methodName>($builder->getResource()->getId())<endif>->post($builder->build()); });
        $builder->with($<resource.updateBuilder.resourceType.name; format="lowercamel">);
        if ($<resource.updateBuilder.resourceType.name; format="lowercamel"> instanceof MapperAware) {
            $builder->setMapper($<resource.updateBuilder.resourceType.name; format="lowercamel">->getMapper());
        }
        return $builder;
    }
    <endif>
    <if(resource.deleteType)>

    /**
     * @param <resource.deleteType.name> $<resource.deleteType.name; format="lowercamel">
     * @return <if(resource.idMethod.methodName)><resource.idMethod.delete.name><else><resource.delete.name><endif>
     */
    public function delete(<resource.deleteType.name> $<resource.deleteType.name; format="lowercamel">): <if(resource.idMethod.methodName)><resource.idMethod.delete.name><else><resource.delete.name><endif>
    {
        return $this-><if(resource.idMethod.methodName)><resource.idMethod.methodName><else>withIDValue<endif>($<resource.deleteType.name; format="lowercamel">->getId())->delete()->withVersion($<resource.deleteType.name; format="lowercamel">->getVersion());
    }
    <endif>
    <if(resource.createType)>

    /**
     * @param <resource.createType.name>|callable $<resource.createType.name; format="lowercamel"> builder function \<code\>
     *   function(<resource.createType.name> $<resource.createType.name; format="lowercamel">): <resource.createType.name> {
     *     // modify $draft as needed
     *     return $<resource.createType.name; format="lowercamel">;
     *   }
     *   \</code\>
     * @throws InvalidArgumentException
     * @return <resource.post.name>
     */
    public function create($<resource.createType.name; format="lowercamel">): <resource.post.name>
    {
        if (is_callable($<resource.createType.name; format="lowercamel">)) {
            $callback = $<resource.createType.name; format="lowercamel">;
            $emptyDraft = $this->mapData(<resource.createType.name>::class, null);
            $<resource.createType.name; format="lowercamel"> = $callback($emptyDraft);
        }
        if (!$<resource.createType.name; format="lowercamel"> instanceof <resource.createType.name>) {
            throw new InvalidArgumentException();
        }
        return $this->post($<resource.createType.name; format="lowercamel">);
    }
    <endif>
}

>>

methodUse(method) ::=<<

<if (method.bodyImport)><useTypeImport(vendorName, method.bodyImport)><endif>
>>

resourceMethod(resource) ::=<<
/**
 * @return Resource<resource.index>
 */
public function <resource.methodName>(<if(resource.hasParams)>$<resource.relativeUri; format="params"> = null<endif>): Resource<resource.index> {
    <if(resource.hasParams)>$args = array_merge($this->getArgs(), array_filter([<resource.relativeUri; format="paramArray">], function($value) { return !is_null($value); }));<endif>
    return new Resource<resource.index>($this->getUri() . '<resource.relativeUri.template>', <if(resource.hasParams)>$args<else>$this->getArgs()<endif>, $this->getMapper());
}

>>

get(request) ::=<<
/**
 * @return <request.name>
 */
public function <request.method.method>(): <request.name> {
    $args = $this->getArgs();
    return new <request.name>(<request.allParamNames: {p|$args['<p>']}; separator=", ">);
}

>>

post(request) ::=<<
/**
 * @param <request.bodyType>$body
 * @return <request.name>
 */
public function <request.method.method>(<request.bodyType>$body = null): <request.name> {
    $args = $this->getArgs();
    return new <request.name>(<request.allParamNames: {p|$args['<p>'], }>$body);
}

>>

delete(request) ::=<<
/**
 * @return <request.name>
 */
public function <request.method.method>(): <request.name> {
    $args = $this->getArgs();
    return new <request.name>(<request.allParamNames: {p|$args['<p>']}; separator=", ">);
}

>>

builderTest(vendorName, resources, createResources, deleteResources, updateResources, modelResources) ::=<<
\<?php
<generatorInfo()>

namespace <vendorName>\\Request\\Test;

use <vendorName>\Request\RequestBuilder;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;
<createResources: {r |<useTypeImport(vendorName, r.createType.import)>}>
<modelResources: {import |<useTypeImport(vendorName, import, "Model")>}>

class RequestBuilderTest extends TestCase
{
    public function getRequests()
    {
        return [
            <resources: {r |<resourceTest(r)>}>
            <resources: {r |<parameterTest(r)>}>
            <createResources: {r |<resourceCreateTest(r)>}>
            <deleteResources: {r |<resourceDeleteTest(r)>}>
            <updateResources: {r |<resourceUpdateTest(r)>}>
        ];
    }

    /**
     * @dataProvider getRequests()
     */
    public function testBuilder(callable $builderFunction, string $method, string $relativeUri, string $body = null)
    {
        $builder = new RequestBuilder();
        $request = $builderFunction($builder);

        $this->assertSame(strtolower($method), strtolower($request->getMethod()));
        $this->assertContains(str_replace(['{', '}'], '', $relativeUri), (string)$request->getUri());
        if (!is_null($body)) {
            $this->assertJsonStringEqualsJsonString($body, (string)$request->getBody());
        };
    }
}
>>

resourceTest(resource) ::=<<
<resource.methods: {request |<requestTest(resource, request)>}>
>>

parameterTest(resource) ::=<<
<resource.methods: {request |<requestParametersTest(resource, request)>}>
>>

requestParametersTest(resource, request) ::=<<
<request.queryParameters: {parameter |<requestParameterTest(resource, request, parameter)>}>
>>

requestParameterTest(resource, request, parameter) ::=<<

'<request.name>_<parameter.name>' => [
    function(RequestBuilder $builder): RequestInterface {
        return $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>'<p.relativeUri; format="paramValues">'<endif>)->}><request.method.method>(<if(request.bodyType)>null<endif>)-><parameter; format="methodName">(<parameter; format="template">);
    },
    '<request.method.method>',
    '<request.absoluteUri.template>?<parameter.name>=<parameter.name>',
],
>>

requestTest(resource, request) ::=<<

'<request.name>' => [
    function(RequestBuilder $builder): RequestInterface {
        return $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>'<p.relativeUri; format="paramValues">'<endif>)->}><request.method.method>(<if(request.bodyType)>null<endif>);
    },
    '<request.method.method>',
    '<request.absoluteUri.template>',
],
>>

resourceCreateTest(resource) ::=<<

'create_<resource.createType.name>' => [
    function(RequestBuilder $builder): RequestInterface {
        return $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>'<p.relativeUri; format="paramValues">'<endif>)->}>create(function($draft) {
            static::assertInstanceOf(<resource.createType.name>::class, $draft);
            return $draft;
        });
    },
    'post',
    '<resource.absoluteUri.template>',
],
>>

resourceUpdateTest(resource) ::=<<

'update_<resource.updateBuilder.resourceType.name>' => [
    function(RequestBuilder $builder): ?RequestInterface {
        return $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>'<p.relativeUri; format="paramValues">'<endif>)->}>update(new <resource.updateBuilder.resourceType.name>Model(['id' => 'ID', 'version' => 1]))->buildRequest();
    },
    'post',
    '<resource.absoluteUri.template><if(resource.updateBuilder.hasId)>/{ID}<endif>',
    '{"version": 1, "actions": []}'
],
>>

resourceDeleteTest(resource) ::=<<

'delete_<resource.deleteType.name>' => [
    function(RequestBuilder $builder): RequestInterface {
        return $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>'<p.relativeUri; format="paramValues">'<endif>)->}>delete(new <resource.deleteType.name>Model(['id' => 'ID', 'version' => 1]));
    },
    'delete',
    '<resource.absoluteUri.template>/{ID}?version=1',
],
>>
