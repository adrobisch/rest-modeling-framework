/*
 * interface template functions
 */

interface(vendorName, type, package, builtInParent, propertyTypes, propertySetters) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<package; format="capitalize">;

interface <type.name> <if(!builtInParent)>extends <type.type.name> <endif>{
    <type.properties, propertyTypes: {p, pt|<propertyInterfaceGet(p, pt)>}>
    <propertySetters: {p |<p>}>
}

>>

propertyInterfaceGet(property, propertyType) ::= <<

/**
 * @return <propertyType>
 */
public function get<property.name; format="capitalize">();
>>

propertyInterfaceSet(property, propertyType, paramType) ::= <<

/**
 * @param <paramType> $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">(<if(propertyType)><propertyType> <endif>$<property.name>);
>>

collectionInterface(vendorName, type, package, builtInParent) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<package; format="capitalize">;

interface <type.name>Collection extends Collection {
    /**
     * @param $index
     * @return <type.name>
     */
    public function at($index);

    /**
     * @return <type.name>
     */
    public function current();

    /**
     * @param $data
     * @param $index
     * @return <type.name>
     */
    public function map($data, $index);
}

>>
/*
 * implementation template functions
 */
model(vendorName, type, package, builtInParent, propertyTypes, propertyGetters, propertySetters, serializers) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<package; format="capitalize">;

class <type.name>Model extends <if(!builtInParent)><type.type.name>Model <else>JsonObject <endif>implements <type.name> {
    <if(type.discriminator || type.discriminatorValue)>
    const DISCRIMINATOR_VALUE = '<type.discriminatorValue>';

    <endif>
    <if(type.discriminator)>
    public function __construct(array $data = []) {
        parent::__construct($data);
        $this-><type.discriminator> = static::DISCRIMINATOR_VALUE;
    }

    <endif>
    <type.properties, propertyTypes: {p, pt|<property(p, pt)>}>
    <propertyGetters: {p | <p>}>
    <propertySetters: {p | <p>}>
    <if(serializers)>

    public function jsonSerialize() {
        $data = parent::jsonSerialize();
        <serializers: {s |<s>}>
        return $data;
    }
    <endif>
}

>>

defaultGetter(property) ::= <<
/**
 * @return mixed
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw('<property.name>');
        $this-><property.name> = $value;
    }
    return $this-><property.name>;
}

>>

dateTimeGetter(property, dateTimeFormat) ::= <<
/**
 * @return \DateTimeImmutable
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw('<property.name>');
        <if(dateTimeFormat)>
        $dateTime = \DateTimeImmutable::createFromFormat('<dateTimeFormat>', $value);
        if ($dateTime) {
            $this-><property.name> = $dateTime;
        }
        <else>
        $this-><property.name> = new \DateTimeImmutable($value);
        <endif>
    }
    return $this-><property.name>;
}

>>

scalarGetter(property, scalarType) ::= <<
/**
 * @return <scalarType>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw('<property.name>');
        $this-><property.name> = (<scalarType>)$value;
    }
    return $this-><property.name>;
}

>>

classGetter(property) ::= <<
/**
 * @return <if(property.type.name)><property.type.name><else>mixed<endif>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw('<property.name>');
        $mappedClass = ResourceClassMap::getMappedClass(<property.type.name>::class);
        if (is_null($value)) {
            return new $mappedClass([]);
        }
        $this-><property.name> = new $mappedClass($value);
    }
    return $this-><property.name>;
}

>>

arrayGetter(property) ::= <<
/**
 * @return <if(property.type.items.name)><property.type.items.name>Collection<else>mixed<endif>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw('<property.name>');
        $mappedClass = ResourceClassMap::getMappedClass(<property.type.items.name>Collection::class);
        if (is_null($value)) {
            return new $mappedClass([]);
        }
        $this-><property.name> = new $mappedClass($value);
    }
    return $this-><property.name>;
}

>>

defaultSetter(property) ::= <<
/**
 * @param $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">($<property.name>)
{
    $this-><property.name> = $<property.name>

    return $this;
}

>>

dateTimeSetter(property) ::= <<
/**
 * @param \DateTimeImmutable|\DateTime|string $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">($<property.name>)
{
    if ($<property.name> instanceof \DateTime) {
        $<property.name> = \DateTimeImmutable::createFromMutable($<property.name>);
    }
    if (!$<property.name> instanceof \DateTimeImmutable) {
        $<property.name> = new \DateTimeImmutable($<property.name>);
    }
    $this->$<property.name> = $<property.name>;

    return $this;
}

>>

scalarSetter(property, scalarType) ::= <<
/**
 * @param <scalarType> $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">($<property.name>)
{
    $this-><property.name> = (<scalarType>)$<property.name>;

    return $this;
}

>>

classSetter(property) ::= <<
/**
 * @param <if(property.type.name)><property.type.name><else>mixed<endif> <property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">(<property.type.name> $<property.name>)
{
    $this-><property.name> = $<property.name>;

    return $this;
}

>>

arraySetter(property) ::= <<
/**
 * @param <if(property.type.items.name)><property.type.items.name>Collection<else>mixed<endif>
 * @return $this
 */
public function set<property.name; format="capitalize">(<property.type.items.name>Collection $<property.name>)
{
    $this-><property.name> = $<property.name>;

    return $this;
}

>>

property(property, propertyType) ::= <<
/**
 * @var <propertyType>
 */
private $<property.name>;

>>

timeSerializer(property, dateTimeFormat) ::= <<
if (isset($data['<property.name>']) && $data['<property.name>'] instanceof \DateTimeImmutable) {
    $data['<property.name>'] = $data['<property.name>']->format('<dateTimeFormat>');
}

>>

dateSerializer(property, dateTimeFormat) ::= <<
if (isset($data['<property.name>']) && $data['<property.name>'] instanceof \DateTimeImmutable) {
    $data['<property.name>'] = $data['<property.name>']->format('<dateTimeFormat>');
}

>>

dateTimeSerializer(property, dateTimeFormat) ::= <<
if (isset($data['<property.name>']) && $data['<property.name>'] instanceof \DateTimeImmutable) {
    $data['<property.name>'] = $data['<property.name>']->setTimeZone(new \DateTimeZone('UTC'))->format('<dateTimeFormat>');
}

>>

collectionModel(vendorName, type, package, builtInParent) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<package; format="capitalize">;

class <type.name>CollectionModel extends JsonCollection implements <type.name>Collection {

    /**
     * @param <type.name> $value
     * @return <type.name>Collection
     */
    public function add($value) {
        if (!$value instanceof <type.name>) {
            throw new \InvalidArgumentException();
        }
        parent::add($value);

        return $this;
    }

    /**
     * @return <type.name>
     */
    public function map($data, $index)
    {
        if (!$data instanceof <type.name>) {
            <if(type.discriminator)>
            $resolvedClass = <type.name>DiscriminatorResolver::discriminatorType($data);
            $mappedClass = ResourceClassMap::getMappedClass($resolvedClass);
            <else>
            $mappedClass = ResourceClassMap::getMappedClass(<type.name>::class);
            <endif>
            $data = new $mappedClass($data);
            $this->rawSet($data, $index);
        }
        return $data;
    }
}

>>

/*
 * common template functions
 */
generatorInfo() ::= <<
/**
 * This file has been auto generated
 * Do not change it
 */
>>

discriminatorResolver(vendorName, package, type, subTypes) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<package; format="capitalize">;

class <type.name; format="capitalize">DiscriminatorResolver
{
    const DISCRIMINATOR = '<type.discriminator>';
    const TYPES = [
        <subTypes: {t|<discriminatorMapping(t)>}>
    ];

    public static function discriminatorType(array $data)
    {
        $types = static::TYPES;
        $discriminatorValue = isset($data[self::DISCRIMINATOR]) ? $data[self::DISCRIMINATOR] : '';
        return isset($types[$discriminatorValue]) ? $types[$discriminatorValue] : <type.name>::class;
    }
}

>>

discriminatorMapping(type) ::= <<
'<type.discriminatorValue>' => <type.name; format="capitalize">::class,

>>

modelMap(vendorName, package, types) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<package; format="capitalize">;

class ModelClassMap extends ClassMap
{
    protected static $types = [
        <types: {t|<typeMapping(t)>}>
    ];
}

>>

typeMapping(typeName) ::= <<
<typeName; format="capitalize">::class => <typeName; format="capitalize">Model::class,

>>
