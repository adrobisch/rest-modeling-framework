main(vendorName, readme) ::= <<

.. _requestbuilder:

=================
RequestBuilder
=================

In order to be able to build request objects you can use the RequestBuilder. The following methods return a HTTP request instance of Guzzle `PSR-7 \<https://github.com/guzzle/psr7>`_.

.. code-block:: php
    :name: requestbuilder.examples.builder.php

    \<?php
    use <vendorName>\Request\RequestBuilder;

    $builder = new RequestBuilder();

<readme.resources: {resource |<resourceConvenience(resource)>}>
<readme.resources: {resource |<resourceInfo(resource)>}>

>>

resourceConvenience(resource) ::=<<
<if(resource.createType)>

.. _requestbuilder.create.<resource.createType.name>:

Create <resource.createType.name>
################################################################################

.. code-block:: php
    :name: requestbuilder.examples.create-<resource.createType.name>.php

    \<?php
    $builder =  new RequestBuilder();
    $request = $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}>create($<resource.createType.name; format="lowercamel">)->buildRequest();
    // or
    $request = $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}>create(
        function (<resource.createType.name> $<resource.createType.name; format="lowercamel">): <resource.createType.name> {
            // modify $draft as needed
            return $<resource.createType.name; format="lowercamel">;
        })->buildRequest();
    $response = $client->send($request);

<endif>
<if(resource.updateBuilder)>

.. _requestbuilder.update.<resource.createType.name>:

Update <resource.updateBuilder.resourceType.name>
################################################################################

All <resource.updateBuilder.resourceType.name> update methods can be found :ref:`here \<<resource.updateBuilder.updateType.name; format="lowercase">builder>`

.. code-block:: php
    :name: requestbuilder.examples.update-<resource.updateBuilder.resourceType.name>.php

    \<?php
    $builder =  new RequestBuilder();
    $request = $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}>update($<resource.updateBuilder.resourceType.name; format="lowercamel">)
        <updateInfo(first(resource.updateBuilder.updates))>
        ->buildRequest();
    $response = $client->send($request);

<endif>
<if(resource.deleteType)>

.. _requestbuilder.delete.<resource.deleteType.name>:

Delete <resource.deleteType.name>
################################################################################


.. code-block:: php
    :name: requestbuilder.examples.delete-<resource.deleteType.name>.php

    \<?php
    $builder =  new RequestBuilder();
    $request = $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}>delete($<resource.deleteType.name; format="lowercamel">);
    $response = $client->send($request);

<endif>
>>

updateInfo(action) ::=<<
-><action.discriminatorValue>(new <action.typeName>())
// or
-><action.discriminatorValue>(function (<action.typeName> $action): <action.typeName> {
    // modify action as needed
    return $action;
})
>>

resourceInfo(resource) ::=<<
<resource.methods: {request |<requestInfo(resource, request)>}>
>>

requestInfo(resource, request) ::=<<

<request.name>
###################################################################

`<resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}><request.method.method>()`

<request.method.description.value>

.. rst-class:: table
.. list-table:: Parameters
    :name: requestbuilder.output.tables.<request.name>
    :header-rows: 1

    * - Parameter
      - Type
    <resource.resourcePath: {p |<pathInfo(p)>}>

.. code-block:: php
    :name: requestbuilder.examples.<request.name>.php

    \<?php
    $builder =  new RequestBuilder();
    $request = $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}><request.method.method>();
    $response = $client->send($request);

>>

pathInfo(resource) ::=<<
<resource.uriParams: {p |<paramInfo(p)>}>
>>

paramInfo(param) ::=<<

* - <p.name>
  - `<p.type.name>`
>>
