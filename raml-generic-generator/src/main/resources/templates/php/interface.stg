import "generic.stg"

interface(vendorName, type, package, builtInParent, propertyTypes, propertySetters, propertyGetters, typeProperties, typePackage, uses, patternProperties, subTypes, subTypePackages) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<package; format="capitalize"><if(typePackage)>\\<typePackage.value.value><endif>;

<if(builtInParent)>
use <vendorName>\\Base\\JsonObject;

<endif>
<uses: {c |<useImport(c)>}>
<if(typePackage)>
use <vendorName>\\<package; format="capitalize">;
<endif>

interface <type.name> extends <if(!builtInParent)><type.type.name><else>JsonObject<endif> {
    <if(type.discriminator)>
    const DISCRIMINATOR = '<type.discriminator>';
    const SUB_TYPES = [
        <subTypes, subTypePackages: {t,tp|<discriminatorMapping(typePackage, package, t,tp)>}>
    ];

    <endif>
    <typeProperties: {p |<propertyConstant(p)>}>
    <propertyGetters, propertyTypes: {p, pt|<propertyInterfaceGet(p, pt)>}>
    <propertySetters: {p |<p>}>
    <if(patternProperties)>
    public function get($key);
    public function set($key, $value);
    <endif>
}

>>

discriminatorMapping(typePackage, package, type, subtypePackage) ::= <<
'<type.discriminatorValue>' => <if(typePackage)><package; format="capitalize">\\<endif><subtypePackage><type.name; format="capitalize">::class,

>>

propertyConstant(entry) ::=<<
const FIELD_<entry.key; format="upperUnderscore"> = '<entry.value>';

>>

propertyInterfaceGet(property, propertyType) ::= <<

/**
 * @return <propertyType>
 */
public function get<property.name; format="capitalize">();
>>

propertyInterfaceSet(property, propertyType, paramType) ::= <<

/**
 * @param <paramType> $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">(<if(propertyType)><propertyType> <endif>$<property.name>);

>>
