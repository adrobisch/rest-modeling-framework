import "generic.stg"

interface(vendorName, type) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<type.package.name>;

<if(type.hasBuiltinParent)>
use <vendorName>\\Base\\JsonObject;

<endif>
<type.typeImports: {ti |<useTypeImport(vendorName, ti)>}>
interface <type.name> extends <if(!type.hasBuiltinParent)><type.parent.name><else>JsonObject<endif> {
    <if(type.discriminator)>
    const DISCRIMINATOR = '<type.discriminator>';
    const SUB_TYPES = [
        <type.subTypes: {t |<discriminatorMapping(t)>}>
    ];

    <endif>
    <type.typeProperties: {p |<propertyConstant(p)>}>
    <type.patternProperties: {p |<propertyConstant(p)>}>
    <type.nonPatternProperties: {p |<propertyInterfaceGet(p)>}>
    <type.nonPatternProperties: {p |<propertyInterfaceSet(p)>}>
    <type.unionProperties: {p |<propertyInterfaceGetAs(p)>}>
    <if(type.hasPatternProperties)>
    public function get($key);
    public function set($key, $value);
    <endif>
}

>>

discriminatorMapping(type) ::= <<
'<type.discriminatorValue>' => <if(type.package.hasPackage)><type.package.name>\\<endif><type.name>::class,

>>

propertyConstant(property) ::=<<
const <property.constantName> = '<property.name>';

>>

propertyInterfaceGetAs(property) ::= <<
<property.type.oneOf: {st |<propertyInterfaceGetAsType(property, st)>}>
>>

propertyInterfaceGetAsType(property, type) ::= <<

/**
 * @return <type.typeName>
 */
public function get<property.name; format="capitalize">As<type.typeName; format="capitalize">();

>>


propertyInterfaceGet(property) ::= <<

/**
 * @return <property.type.typeName>
 */
public function get<property.name; format="capitalize">();

>>

propertyInterfaceSet(property) ::= <<

/**
 * @param <property.type.typeName> $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">(<if(property.paramType)><property.paramType> <endif>$<property.name>);

>>
