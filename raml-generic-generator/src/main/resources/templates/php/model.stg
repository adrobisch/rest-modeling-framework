import "generic.stg"

/*
 * implementation template functions
 */
model(vendorName, type) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<type.package.name>;

<if(type.hasBuiltinParent)>
use <vendorName>\\Base\\JsonObjectModel;

<else>
<useTypeImport(vendorName, type.parent.import, "Model")>
<endif>
<type.typeImports: {ti |<useTypeImport(vendorName, ti)>}>
class <type.name>Model extends <if(!type.hasBuiltinParent)><type.parent.name>Model<else>JsonObjectModel<endif> implements <type.name> {
    <if(type.discriminator || type.discriminatorValue)>
    const DISCRIMINATOR_VALUE = '<type.discriminatorValue>';

    <endif>
    <if(type.patternProperties)>
    private $patternData = [];
    <endif>
    <if(type.discriminator)>
    public function __construct(array $data = []) {
        parent::__construct($data);
        $this->set<type.discriminator; format="capitalize">(static::DISCRIMINATOR_VALUE);
    }

    <endif>
    <type.nonPatternProperties: {p |<property(p)>}>
    <type.nonPatternProperties: {p |<(p.getter.getter)(type, p)>}>
    <type.nonPatternProperties: {p |<(p.setter.setter)(p)>}>
    <if(type.patternProperties)>
    <patternGetter(type, type.patternProperties)>
    <patternSetter(type, type.patternProperties)>
    <endif>
    <if(type.serializers)>

    public function jsonSerialize() {
        $data = parent::jsonSerialize();
        <type.serializers: {s|<(s.serializer)(type, s.property, s.format)>}>
        return $data;
    }
    <endif>
    <if(type.patternProperties)>

    private function validKey($key)
    {
        switch (true) {
            <type.patternProperties: {p |<patternValid(type, p)>}>
            default:
                return false;
        }
    }

    /**
     * @inheritdoc
     */
    protected function toArray()
    {
        $data = parent::toArray();
        $data = array_merge($data, $this->patternData);
        unset($data['patternData']);
        return $data;
    }
    <endif>
}

>>

defaultGetter(type, property) ::= <<
/**
 * @return <property.type.typeName>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw(<type.name>::FIELD_<property.name; format="upperUnderscore">);
        $this-><property.name> = $value;
    }
    return $this-><property.name>;
}

>>

patternGetter(type, properties) ::= <<
/**
 * @param string $key
 * @return mixed
 */
public function get($key)
{
    if (!$this->validKey($key)) {
        throw new \InvalidArgumentException();
    }
    if (isset($this->patternData[$key])) {
        $value = $this->patternData[$key];
    } else {
        $value = $this->raw($key);
    }
    return $value;
}

>>

patternSetter(type, properties) ::= <<
/**
 * @param string $key
 * @param mixed $value
 * @return $this
 */
public function set($key, $value)
{
    if (!$this->validKey($key)) {
        throw new \InvalidArgumentException();
    }
    $this->patternData[$key] = $value;
    return $this;
}

>>

patternValid(type, property) ::= <<
case preg_match('<property.name>', $key):
    return true;
>>

dateTimeGetter(type, property) ::= <<
/**
 * @return <property.type.typeName>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw(<type.name>::FIELD_<property.name; format="upperUnderscore">);
        <if(property.getter.format)>
        $dateTime = \DateTimeImmutable::createFromFormat('<property.getter.format>', $value);
        if ($dateTime) {
            $this-><property.name> = $dateTime;
        }
        <else>
        $this-><property.name> = new \DateTimeImmutable($value);
        <endif>
    }
    return $this-><property.name>;
}

>>

scalarGetter(type, property) ::= <<
/**
 * @return <property.type.typeName>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw(<type.name>::FIELD_<property.name; format="upperUnderscore">);
        $this-><property.name> = (<property.getter.format>)$value;
    }
    return $this-><property.name>;
}

>>

classGetter(type, property) ::= <<
/**
 * @return <property.type.typeName>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw(<type.name>::FIELD_<property.name; format="upperUnderscore">);
        <if(property.type.discriminator)>
        $resolvedClass = $this->resolveDiscriminator(<property.type.name>::class, $value);
        if (is_null($value)) {
            return $this->mapData($resolvedClass, null);
        }
        $this-><property.name> = $this->mapData($resolvedClass, $value);
        <else>
        if (is_null($value)) {
            return $this->mapData(<property.type.name>::class, null);
        }
        $this-><property.name> = $this->mapData(<property.type.name>::class, $value);
        <endif>
    }
    return $this-><property.name>;
}

>>

arrayGetter(type, property) ::= <<
/**
 * @return <property.type.typeName>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw(<type.name>::FIELD_<property.name; format="upperUnderscore">);
        if (is_null($value)) {
            return $this->mapData(<property.type.typeName>::class, null);
        }
        $this-><property.name> = $this->mapData(<property.type.typeName>::class, $value);
    }
    return $this-><property.name>;
}

>>

defaultSetter(property) ::= <<
/**
 * @param $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">($<property.name>)
{
    $this-><property.name> = $<property.name>;

    return $this;
}

>>

dateTimeSetter(property) ::= <<
/**
 * @param \DateTimeImmutable|\DateTime|string $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">($<property.name>)
{
    if ($<property.name> instanceof \DateTime) {
        $<property.name> = \DateTimeImmutable::createFromMutable($<property.name>);
    }
    if (!$<property.name> instanceof \DateTimeImmutable) {
        $<property.name> = new \DateTimeImmutable($<property.name>);
    }
    $this->$<property.name> = $<property.name>;

    return $this;
}

>>

scalarSetter(property) ::= <<
/**
 * @param <property.type.typeName> $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">($<property.name>)
{
    $this-><property.name> = (<property.type.typeName>)$<property.name>;

    return $this;
}

>>

classSetter(property) ::= <<
/**
 * @param <if(property.setter.docType)><property.setter.docType><else>mixed<endif> $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">(<if(property.setter.paramType)><property.setter.paramType> <endif>$<property.name>)
{
    <if(property.setter.paramCheck)>
    if (!$<property.name> instanceof <property.setter.docType>) {
        throw new \InvalidArgumentException();
    }
    <endif>
    $this-><property.name> = $<property.name>;

    return $this;
}

>>

arraySetter(property) ::= <<
/**
 * @param <if(property.setter.paramCheck)><property.setter.docType> <else><if(property.paramType)><property.paramType><else>mixed<endif><endif> $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">(<if(property.paramType)><property.paramType> <endif>$<property.name>)
{
    <if(property.setter.paramCheck)>
    if (!$<property.name> instanceof <property.setter.docType>) {
        throw new \InvalidArgumentException();
    }
    <endif>
    $this-><property.name> = $<property.name>;

    return $this;
}

>>

property(property) ::= <<
/**
 * @var <property.type.typeName>
 */
private $<property.name>;

>>

timeSerializer(type, property, dateTimeFormat) ::= <<

if (isset($data[<type.name>::<property.constantName>]) && $data[<type.name>::<property.constantName>] instanceof \DateTimeImmutable) {
    $data[<type.name>::<property.constantName>] = $data[<type.name>::<property.constantName>]->format('<dateTimeFormat>');
}
>>

dateSerializer(type, property, dateTimeFormat) ::= <<

if (isset($data[<type.name>::<property.constantName>]) && $data[<type.name>::<property.constantName>] instanceof \DateTimeImmutable) {
    $data[<type.name>::<property.constantName>] = $data[<type.name>::<property.constantName>]->format('<dateTimeFormat>');
}
>>

dateTimeSerializer(type, property, dateTimeFormat) ::= <<

if (isset($data[<type.name>::<property.constantName>]) && $data[<type.name>::<property.constantName>] instanceof \DateTimeImmutable) {
    $data[<type.name>::<property.constantName>] = $data[<type.name>::<property.constantName>]->setTimeZone(new \DateTimeZone('UTC'))->format('<dateTimeFormat>');
}
>>
