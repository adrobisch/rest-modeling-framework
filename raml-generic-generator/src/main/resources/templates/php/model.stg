import "generic.stg"

/*
 * implementation template functions
 */
model(vendorName, type, package, builtInParent, propertyTypes, propertyGetters, propertySetters, serializers, typePackage, uses) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<package; format="capitalize"><if(typePackage)>\\<typePackage.value.value><endif>;

<if(builtInParent)>
use <vendorName>\\<package; format="capitalize">\\JsonObjectModel;
<endif>
use <vendorName>\\<package; format="capitalize">\\ResourceClassMap;
<uses: {c |<useImport(c)>}>

class <type.name>Model extends <if(!builtInParent)><type.type.name>Model<else>JsonObjectModel<endif> implements <type.name> {
    <if(type.discriminator || type.discriminatorValue)>
    const DISCRIMINATOR_VALUE = '<type.discriminatorValue>';

    <endif>
    <if(type.discriminator)>
    public function __construct(array $data = []) {
        parent::__construct($data);
        $this->set<type.discriminator; format="capitalize">(static::DISCRIMINATOR_VALUE);
    }

    <endif>
    <type.properties, propertyTypes: {p, pt|<property(p, pt)>}>
    <propertyGetters: {p | <p>}>
    <propertySetters: {p | <p>}>
    <if(serializers)>

    public function jsonSerialize() {
        $data = parent::jsonSerialize();
        <serializers: {s |<s>}>
        return $data;
    }
    <endif>
}

>>

defaultGetter(property, parent) ::= <<
/**
 * @return mixed
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw(<parent.name>::FIELD_<property.name; format="upperUnderscore">);
        $this-><property.name> = $value;
    }
    return $this-><property.name>;
}

>>

dateTimeGetter(property, dateTimeFormat, parent) ::= <<
/**
 * @return \DateTimeImmutable
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw(<parent.name>::FIELD_<property.name; format="upperUnderscore">);
        <if(dateTimeFormat)>
        $dateTime = \DateTimeImmutable::createFromFormat('<dateTimeFormat>', $value);
        if ($dateTime) {
            $this-><property.name> = $dateTime;
        }
        <else>
        $this-><property.name> = new \DateTimeImmutable($value);
        <endif>
    }
    return $this-><property.name>;
}

>>

scalarGetter(property, scalarType, parent) ::= <<
/**
 * @return <scalarType>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw(<parent.name>::FIELD_<property.name; format="upperUnderscore">);
        $this-><property.name> = (<scalarType>)$value;
    }
    return $this-><property.name>;
}

>>

classGetter(property, parent) ::= <<
/**
 * @return <if(property.type.name)><property.type.name><else>mixed<endif>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw(<parent.name>::FIELD_<property.name; format="upperUnderscore">);
        <if(property.type.discriminator)>
        $resolvedClass = <property.type.name>DiscriminatorResolver::discriminatorType($value);
        $mappedClass = ResourceClassMap::getMappedClass($resolvedClass);
        <else>
        $mappedClass = ResourceClassMap::getMappedClass(<property.type.name>::class);
        <endif>
        if (is_null($value)) {
            return new $mappedClass([]);
        }
        $this-><property.name> = new $mappedClass($value);
    }
    return $this-><property.name>;
}

>>

arrayGetter(property, parent, propertyType, paramType) ::= <<
/**
 * @return <if(paramType)><paramType><else>array<endif>
 */
public function get<property.name; format="capitalize">()
{
    if (is_null($this-><property.name>)) {
        $value = $this->raw(<parent.name>::FIELD_<property.name; format="upperUnderscore">);
        $mappedClass = ResourceClassMap::getMappedClass(<propertyType>::class);
        if (is_null($value)) {
            return new $mappedClass([]);
        }
        $this-><property.name> = new $mappedClass($value);
    }
    return $this-><property.name>;
}

>>

defaultSetter(property) ::= <<
/**
 * @param $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">($<property.name>)
{
    $this-><property.name> = $<property.name>;

    return $this;
}

>>

dateTimeSetter(property) ::= <<
/**
 * @param \DateTimeImmutable|\DateTime|string $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">($<property.name>)
{
    if ($<property.name> instanceof \DateTime) {
        $<property.name> = \DateTimeImmutable::createFromMutable($<property.name>);
    }
    if (!$<property.name> instanceof \DateTimeImmutable) {
        $<property.name> = new \DateTimeImmutable($<property.name>);
    }
    $this->$<property.name> = $<property.name>;

    return $this;
}

>>

scalarSetter(property, scalarType) ::= <<
/**
 * @param <scalarType> $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">($<property.name>)
{
    $this-><property.name> = (<scalarType>)$<property.name>;

    return $this;
}

>>

classSetter(property, propertyType, paramType, paramCheck) ::= <<
/**
 * @param <if(paramType)><paramType><else>mixed<endif> $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">(<if(propertyType)><propertyType> <endif> $<property.name>)
{
    <if(paramCheck)>
    if (!$<property.name> instanceof <paramType>) {
        throw new \InvalidArgumentException();
    }
    <endif>
    $this-><property.name> = $<property.name>;

    return $this;
}

>>

arraySetter(property, propertyType, paramType, paramCheck) ::= <<
/**
 * @param <if(paramType)><paramType><else>mixed<endif> $<property.name>
 * @return $this
 */
public function set<property.name; format="capitalize">(<if(propertyType)><propertyType> <endif>$<property.name>)
{
    <if(paramCheck)>
    if (!$<property.name> instanceof <paramType>) {
        throw new \InvalidArgumentException();
    }
    <endif>
    $this-><property.name> = $<property.name>;

    return $this;
}

>>

property(property, propertyType) ::= <<
/**
 * @var <propertyType>
 */
private $<property.name>;

>>

timeSerializer(property, dateTimeFormat) ::= <<
if (isset($data['<property.name>']) && $data['<property.name>'] instanceof \DateTimeImmutable) {
    $data['<property.name>'] = $data['<property.name>']->format('<dateTimeFormat>');
}

>>

dateSerializer(property, dateTimeFormat) ::= <<
if (isset($data['<property.name>']) && $data['<property.name>'] instanceof \DateTimeImmutable) {
    $data['<property.name>'] = $data['<property.name>']->format('<dateTimeFormat>');
}

>>

dateTimeSerializer(property, dateTimeFormat) ::= <<
if (isset($data['<property.name>']) && $data['<property.name>'] instanceof \DateTimeImmutable) {
    $data['<property.name>'] = $data['<property.name>']->setTimeZone(new \DateTimeZone('UTC'))->format('<dateTimeFormat>');
}

>>
