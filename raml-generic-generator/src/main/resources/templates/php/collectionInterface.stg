import "generic.stg"

collectionInterface(vendorName, type) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<type.package.parts; separator="\\">;

<if(type.hasBuiltinParent)>
use <vendorName>\\Base\\Collection;

<else>
<useTypeImport(vendorName, type.parent.import, "Collection")>
<endif>

interface <type.name> extends <if(!type.hasBuiltinParent)><type.parent.name><endif>Collection
{
    /**
     * @param $index
     * @return <type.elementName>
     */
    public function at($index);

    /**
     * @return <type.elementName>
     */
    public function current();

    /**
     * @param $data
     * @param $index
     * @return <type.elementName>
     */
    public function map($data, $index);
    <if(type.identifiers)>

    <type.identifiers: {id |<indexGetter(type, id)>}>
    <endif>
}

>>

indexGetter(type, identifier) ::=<<

/**
 * @param <identifier.type.name> $<identifier.name>
 * @return <type.elementName>
 */
public function by<identifier.name; format="capitalize">($<identifier.name>);
>>
