main(vendorName, readme) ::= <<

# RequestBuilder

In order to be able to build request objects you can use the RequestBuilder. The following methods return a HTTP request instance of Guzzle [PSR-7](https://github.com/guzzle/psr7).

```php
use <vendorName>\Request\RequestBuilder;

$builder = new RequestBuilder();
```

<readme.resources: {resource |<resourceConvenience(resource)>}>
<readme.resources: {resource |<resourceInfo(resource)>}>

>>

resourceConvenience(resource) ::=<<
<if(resource.createType)>

## Create <resource.createType.name>

### Example
```php
$builder =  new RequestBuilder();
$request = $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}>create($<resource.createType.name; format="lowercamel">)->buildRequest();
// or
$request = $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}>create(
    function (<resource.createType.name> $<resource.createType.name; format="lowercamel">): <resource.createType.name> {
        // modify $draft as needed
        return $<resource.createType.name; format="lowercamel">;
    })->buildRequest();
$response = $client->send($request);
```
<endif>
<if(resource.updateBuilder)>

## Update <resource.updateBuilder.resourceType.name>

All <resource.updateBuilder.resourceType.name> update methods can be found [here](<resource.updateBuilder.updateType.name>Builder.md)

### Example
```php
$builder =  new RequestBuilder();
$request = $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}>update($<resource.updateBuilder.resourceType.name; format="lowercamel">)
    <updateInfo(first(resource.updateBuilder.updates))>
    ->buildRequest();
$response = $client->send($request);
```
<endif>
<if(resource.deleteType)>

## Delete <resource.deleteType.name>

### Example
```php
$builder =  new RequestBuilder();
$request = $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}>delete($<resource.deleteType.name; format="lowercamel">);
$response = $client->send($request);
```
<endif>
>>

updateInfo(action) ::=<<
-><action.discriminatorValue>(new <action.typeName>())
// or
-><action.discriminatorValue>(function (<action.typeName> $action): <action.typeName> {
    // modify action as needed
    return $action;
})
>>

resourceInfo(resource) ::=<<
<resource.methods: {request |<requestInfo(resource, request)>}>
>>

requestInfo(resource, request) ::=<<

## `<resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}><request.method.method>()`

<request.method.description.value>

### Parameters
<resource.resourcePath: {p |<pathInfo(p)>}>

### Example
```php
$builder =  new RequestBuilder();
$request = $builder-><resource.resourcePath: {p |<p.methodName>(<if(p.hasParams)>$<p.relativeUri; format="paramVars"><endif>)->}><request.method.method>();
$response = $client->send($request);
```
>>

pathInfo(resource) ::=<<
<resource.uriParams: {p |<paramInfo(p)>}>
>>

paramInfo(param) ::=<<

* **<p.name>** (type: `<p.type.name>`)
>>
