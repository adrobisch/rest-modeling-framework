import "generic.stg"

collectionModel(vendorName, type, package, builtInParent, typePackage, uses, identifiers) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<package; format="capitalize"><if(typePackage)>\\<typePackage.value.value><endif>;

use <vendorName>\\Base\\JsonCollection;
use <vendorName>\\Base\\Collection;
<if(type.discriminator)>
use <vendorName>\\Base\\DiscriminatorResolver;
<endif>

class <type.name>CollectionModel extends JsonCollection implements <type.name>Collection {

    /**
     * @param <type.name> $value
     * @return <type.name>Collection
     */
    public function add($value) {
        if (!$value instanceof <type.name>) {
            throw new \InvalidArgumentException();
        }
        parent::add($value);

        return $this;
    }

    /**
     * @return <type.name>
     */
    public function map($data, $index)
    {
        if (!is_null($data) && !$data instanceof <type.name>) {
            <if(type.discriminator)>
            $resolvedClass = $this->resolveDiscriminator(<type.name>::class, $data);
            $data = $this->mapData($resolvedClass, $data);
            <else>
            $data = $this->mapData(<type.name>::class, $data);
            <endif>
            $this->rawSet($data, $index);
        }
        return $data;
    }
    <if(identifiers)>

    protected function index($data)
    {
        foreach ($data as $key => $value) {
            <identifiers: {id |<index(id)>}>
        }
    }

    <identifiers: {id |<indexGetter(type, id)>}>
    <endif>
}

>>

index(identifier) ::=<<

if (isset($value['<identifier>'])) {
    $this->addToIndex('<identifier>', $value['<identifier>'], $key);
}
>>

indexGetter(type, identifier) ::=<<

/**
 * @return <type.name>
 */
public function by<identifier; format="capitalize">($<identifier>)
{
    return $this->valueByKey('<identifier>', $<identifier>);
}
>>
