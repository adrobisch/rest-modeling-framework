import "generic.stg"

collectionModel(vendorName, type) ::= <<
\<?php
<generatorInfo()>

namespace <vendorName>\\<type.package.parts; separator="\\">;

<if(type.hasBuiltinParent)>
use <vendorName>\\Base\\JsonCollection;
<else>
<useTypeImport(vendorName, type.parent.import, "CollectionModel")>
<endif>
use <vendorName>\\Exception\\InvalidArgumentException;

class <type.name>Model extends <if(!type.hasBuiltinParent)><type.parent.name>CollectionModel<else>JsonCollection<endif> implements <type.name>
{

    /**
     * @param <type.elementName> $value
     * @return <type.name>
     */
    public function add($value) {
        if (!$value instanceof <type.elementName>) {
            throw new InvalidArgumentException();
        }
        parent::add($value);

        return $this;
    }

    /**
     * @return <type.elementName>
     */
    public function map($data, $index)
    {
        if (!is_null($data) && !$data instanceof <type.elementName>) {
            <if(type.discriminator)>
            $resolvedClass = $this->resolveDiscriminator(<type.elementName>::class, $data);
            $data = $this->mapData($resolvedClass, $data);
            <else>
            $data = $this->mapData(<type.elementName>::class, $data);
            <endif>
            $this->rawSet($data, $index);
        }
        return $data;
    }
    <if(type.identifiers)>

    protected function index($data)
    {
        foreach ($data as $key => $value) {
            <type.identifiers: {id |<index(id)>}>
        }
    }

    <type.identifiers: {id |<indexGetter(type, id)>}>
    <endif>
}

>>

index(identifier) ::=<<

if (isset($value['<identifier.name>'])) {
    $this->addToIndex('<identifier.name>', $value['<identifier.name>'], $key);
}
>>

indexGetter(type, identifier) ::=<<

/**
 * @param <identifier.type.name> $<identifier.name>
 * @return <type.elementName>
 */
public function by<identifier.name; format="capitalize">($<identifier.name>)
{
    return $this->valueByKey('<identifier.name>', $<identifier.name>);
}
>>
