@Ecore(nsPrefix="types",nsURI="http://www.vrap.io/raml/types")
@GenModel(
    modelDirectory="/raml-model/src/main/java-gen",
    complianceLevel="8.0"
)
package io.vrap.rmf.raml.model.types


import io.vrap.rmf.raml.model.elements.DocumentableElement
import io.vrap.rmf.raml.model.elements.IdentifiableElement
import io.vrap.rmf.raml.model.facets.ArrayTypeFacet
import io.vrap.rmf.raml.model.facets.DateTimeTypeFacet
import io.vrap.rmf.raml.model.facets.EnumFacet
import io.vrap.rmf.raml.model.facets.FileTypeFacet
import io.vrap.rmf.raml.model.facets.Instance
import io.vrap.rmf.raml.model.facets.NumberTypeFacet
import io.vrap.rmf.raml.model.facets.ObjectTypeFacet
import io.vrap.rmf.raml.model.facets.StringTypeFacet

import io.vrap.rmf.raml.model.util.SuperTypeCrossReferencer

/*
 * Every type, whether built-in or user-defined, has the any type at the root of its inheritance tree.
 * By definition, the any type is a type which imposes no restrictions, i.e. any instance of data is
 * valid against it.
 */
class AnyType extends AnnotationsFacet, DocumentableElement, IdentifiableElement, EnumFacet {
	/*
	 * The type which this type extends.
	 */
	refers AnyType ^type	
	
	/*
	 * Returns the computed sub types of this type.
	 */
	op AnyType[] subTypes() {
		SuperTypeCrossReferencer.getSubTypes(this)
	}
}

class Property extends AnnotationsFacet {
	/*
	 * The name of this property.
	 */
	String name

	/*
	 * The type of this property.
	 */
	refers AnyType ^type

	/*
	 * Specifies that the property is required or not.
	 */
	Boolean required = "true"
}

interface PropertiesFacet {
	/*
	 * The properties that instances of this type can or must have.
	 */
	contains Property[] properties	
}

class ObjectType extends AnyType, ObjectTypeFacet, PropertiesFacet {
	
	op Property getProperty(String name) {
		for (Property property : properties) {
			if (name == property.name) return property
		}
		return null
	}
}

interface ItemsFacet {	
	/*
	 * Indicates the type that all items in the array are inherited from.
	 * Can be a reference to an existing type or an inline type declaration.
	 */
	refers AnyType items
}

/*
 * A JSON array.
 */
class ArrayType extends AnyType, ArrayTypeFacet, ItemsFacet {
}

/*
 * A JSON string.
 */
class StringType extends AnyType, StringTypeFacet {
}

/*
 * Any JSON number.
 */
class NumberType extends AnyType, NumberTypeFacet {
}

/*
 * A subset of JSON numbers that are positive and negative multiples of 1.
 */
class IntegerType extends NumberType {
}

/*
 * A JSON boolean.
 */
class BooleanType extends AnyType {
}

/*
 * The "full-date" notation of RFC3339, namely yyyy-mm-dd.
 * Does not support time or time zone-offset notation.
 */
class DateOnlyType extends AnyType {
}

/*
 * The "partial-time" notation of RFC3339, namely hh:mm:ss[.ff...].
 * Does not support date or time zone-offset notation.
 */
class TimeOnlyType extends AnyType {
}

/*
 * Combined date-only and time-only with a separator of "T", namely yyyy-mm-ddThh:mm:ss[.ff...].
 * Does not support a time zone offset.
 */
class DateTimeOnlyType extends AnyType {
}

class DateTimeType extends AnyType, DateTimeTypeFacet {
}

/*
 * The ​file​ type can constrain the content to send through forms. When this type is used in the
 * context of web forms it SHOULD be represented as a valid file upload in JSON format.
 * File content SHOULD be a base64-encoded string.
 */
class FileType extends AnyType, FileTypeFacet {
}

class NilType extends AnyType {
}

/*
 * A union type is a composition of one of its types.
 */
class UnionType extends AnyType {
	refers AnyType[] oneOf	
}

/*
 * An intersection type is the composition of all of its types.
 */
class IntersectionType extends AnyType {
	refers AnyType[] allOf
}

/*
 * The location within an API specification where annotations can be applied MUST be one of the target locations
 * in the following Target Locations table. The targets are the locations themselves, not sub-properties within the locations.
 * For example, the Method target refers to the method node, not to the method display name, description, and so on.
 */
enum AnnotationTarget {
	/*
	 * The root of a RAML document
	 */
	API,
	/*
	 * An item in the collection of items that is the value of the root-level documentation node.
	 */
	DocumentationItem,
	/*
	 * A resource (relative URI) node, root-level or nested
	 */
	Resource,
	/*
	 * A method node.
	 */
	Method,
	/*
	 * A declaration of the responses node, whose key is an HTTP status code.
	 */
	Response,
	/*
	 * The body node of a method.
	 */
	RequestBody,
	/*
	 * The body node of a response.
	 */
	ResponseBody,
	/*
	 * A data type declaration (inline or in a global type collection), header declaration,
	 * query parameter declaration, URI parameter declaration, or a property within any of these declarations,
	 * where the type property can be used.
	 */
	TypeDeclaration,
	/*
	 * Either an example or examples node
	 */
	Example,
	/*
	 * A resource type node.
	 */
	ResourceType,
	/*
	 * A trait node.
	 */
	Trait,
	/*
	 * A security scheme declaration.
	 */
	SecurityScheme,
	/*
	 * The settings node of a security scheme declaration
	 */
	SecuritySchemeSettings,
	/*
	 * A declaration of the annotationTypes node, whose key is a name of an annotation type and whose value describes the annotation.
	 */
	AnnotationType,
	/*
	 * The root of a library.
	 */
	Library,
	/*
	 * The root of an overlay.
	 */
	Overlay,
	/*
	 * The root of an extension.
	 */
	Extension
}

/*
 * Annotation types are declared using the OPTIONAL root-level annotationTypes node.
 * The value of the annotationsType node is a map whose keys define annotation type names,
 * also referred to as annotations, and whose values are key-value pairs called annotation type declarations.
 * An annotation type declaration has the same syntax as a data type declaration,
 * and its facets have the same syntax as the corresponding ones for data types, but with the addition of the allowedTargets facet.
 * An annotation type declaration constrains the value of an annotation of that type just as a data type declaration constrains
 * the value of a URI parameter, query parameter, header, or body of that type.
 * The allowedTargets node restricts the kinds of locations where the annotation can be applied. Annotation types, like data types,
 * can extend other data types, but annotation types themselves can neither be extended nor used anywhere data types can be used.
 */
class AnyAnnotationType extends DocumentableElement, IdentifiableElement, AnnotationsFacet {	
		/*
	 * The type which this type extends.
	 */
	refers AnyAnnotationType ^type
	
	/*
	 * The locations to which annotations are restricted.
	 * If this node is specified, annotations of this type may be applied only on a node corresponding to one of the locations.
	 */
	AnnotationTarget[] allowedTargets	
}

class TimeOnlyAnnotationType extends AnyAnnotationType {
}

class DateTimeAnnotationType extends DateTimeTypeFacet, AnyAnnotationType {
}

class DateTimeOnlyAnnotationType extends AnyAnnotationType {
}

class DateOnlyAnnotationType extends AnyAnnotationType {
}

class NumberAnnotationType extends NumberTypeFacet, AnyAnnotationType {
}

class IntegerAnnotationType extends NumberAnnotationType {
}

class BooleanAnnotationType extends AnyAnnotationType {	
}

class StringAnnotationType extends StringTypeFacet, AnyAnnotationType {	
}

class NilAnnotationType extends AnyAnnotationType {
}

class FileAnnotationType extends FileTypeFacet, AnyAnnotationType {	
}

class ObjectAnnotationType extends AnyAnnotationType, ObjectTypeFacet, PropertiesFacet  {	
}

class ArrayAnnotationType extends AnyAnnotationType, ArrayTypeFacet, ItemsFacet {
}

interface AnnotationsFacet {
	/*
	 * The annotations of this element.
	 */
	contains Annotation[] annotations
}

class Annotation {
	/*
	 * The annotation type of this annotation.
	 */
	refers AnyAnnotationType ^type
	
	/*
	 * The value of this annotation.
	 */
	contains Instance value
}
