@Ecore(nsPrefix="types",nsURI="http://www.vrap.io/raml/types")
@GenModel(
    modelDirectory="/raml-model/src/main/java-gen",
    complianceLevel="8.0"
)
package io.vrap.rmf.raml.model.types


import io.vrap.rmf.raml.model.elements.DocumentableElement
import io.vrap.rmf.raml.model.elements.IdentifiableElement
import io.vrap.rmf.raml.model.elements.Type
import io.vrap.rmf.raml.model.facets.AnnotationsFacet
import io.vrap.rmf.raml.model.facets.ArrayTypeFacet
import io.vrap.rmf.raml.model.facets.DateTimeTypeFacet
import io.vrap.rmf.raml.model.facets.EnumFacet
import io.vrap.rmf.raml.model.facets.FileTypeFacet
import io.vrap.rmf.raml.model.facets.NumberTypeFacet
import io.vrap.rmf.raml.model.facets.ObjectTypeFacet
import io.vrap.rmf.raml.model.facets.StringTypeFacet

/*
 * Every type, whether built-in or user-defined, has the any type at the root of its inheritance tree.
 * By definition, the any type is a type which imposes no restrictions, i.e. any instance of data is
 * valid against it.
 */
class AnyType extends AnnotationsFacet, DocumentableElement, IdentifiableElement, EnumFacet, Type {
	/*
	 * The type which this type extends.
	 */
	refers AnyType ^type	
}

class Property {
	/*
	 * The name of this property.
	 */
	String name

	/*
	 * The type of this property.
	 */
	refers AnyType ^type

	/*
	 * Specifies that the property is required or not.
	 */
	Boolean required = "true"
}

interface PropertiesFacet {
	/*
	 * The properties that instances of this type can or must have.
	 */
	contains Property[] properties	
}

class ObjectType extends AnyType, ObjectTypeFacet, PropertiesFacet {
	
	op Property getProperty(String name) {
		for (Property property : properties) {
			if (name == property.name) return property
		}
		return null
	}
}

interface ItemsFacet {	
	/*
	 * Indicates the type all items in the array are inherited from.
	 * Can be a reference to an existing type or an inline type declaration.
	 */
	refers AnyType items
}

/*
 * A JSON array.
 */
class ArrayType extends AnyType, ArrayTypeFacet, ItemsFacet {
}

/*
 * A JSON string.
 */
class StringType extends AnyType, StringTypeFacet {
}

/*
 * Any JSON number.
 */
class NumberType extends AnyType, NumberTypeFacet {
}

/*
 * A subset of JSON numbers that are positive and negative multiples of 1.
 */
class IntegerType extends NumberType {
}

/*
 * A JSON boolean.
 */
class BooleanType extends AnyType {
}

/*
 * The "full-date" notation of RFC3339, namely yyyy-mm-dd.
 * Does not support time or time zone-offset notation.
 */
class DateOnlyType extends AnyType {
}

/*
 * The "partial-time" notation of RFC3339, namely hh:mm:ss[.ff...].
 * Does not support date or time zone-offset notation.
 */
class TimeOnlyType extends AnyType {
}

/*
 * Combined date-only and time-only with a separator of "T", namely yyyy-mm-ddThh:mm:ss[.ff...].
 * Does not support a time zone offset.
 */
class DateTimeOnlyType extends AnyType {
}

class DateTimeType extends AnyType, DateTimeTypeFacet {
}

/*
 * The ​file​ type can constrain the content to send through forms. When this type is used in the
 * context of web forms it SHOULD be represented as a valid file upload in JSON format.
 * File content SHOULD be a base64-encoded string.
 */
class FileType extends AnyType, FileTypeFacet {
}

class NilType extends AnyType {
}