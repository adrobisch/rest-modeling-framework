@Ecore(nsPrefix="types",nsURI="http://www.vrap.io/raml/modules")
@GenModel(
    modelDirectory="/raml-model/src/main/java-gen",
    complianceLevel="8.0"
)
package io.vrap.rmf.raml.model.modules

import org.eclipse.emf.ecore.EDiagnosticChain
import org.eclipse.emf.ecore.EMap
import org.eclipse.emf.common.util.Diagnostic
import org.eclipse.emf.common.util.BasicDiagnostic

import io.vrap.rmf.raml.model.facets.ProtocolsFacet
import io.vrap.rmf.raml.model.types.AnnotationsFacet
import io.vrap.rmf.raml.model.types.AnyAnnotationType
import io.vrap.rmf.raml.model.types.AnyType
import io.vrap.rmf.raml.model.types.InlineTypeContainer

import io.vrap.rmf.raml.model.resources.ResourceContainer
import io.vrap.rmf.raml.model.resources.ResourceType
import io.vrap.rmf.raml.model.resources.Trait
import io.vrap.rmf.raml.model.resources.UriTemplate
import io.vrap.rmf.raml.model.resources.UriParameter

import io.vrap.rmf.raml.model.security.SecuritySchemeContainer
import io.vrap.rmf.raml.model.security.SecuredByFacet

class Api extends AnnotationsFacet, TypeContainer, ResourceContainer, ProtocolsFacet, 
		SecuritySchemeContainer, SecuredByFacet {
	/*
	 * A short, plain-text label for the API. Its value is a string.
	 */
	String[1] title
	/*
	 * A substantial, human-friendly description of the API.
	 * Its value is a string and MAY be formatted using markdown.
	 */
	String description

	/*
	 * The version of the API, for example "v1".
	 */
	String version

	/*
	 * A URI that serves as the base for URIs of all resources. Often used as the base
	 * of the URL of each resource containing the location of the API. Can be a template URI.
	 */
	contains UriTemplate baseUri

	/*
	 * Specifies the uri parameters in the base URI.
	 */
	contains UriParameter[] baseUriParameters

	/*
	 * The default media types to use for request and response bodies (payloads),
	 * for example "application/json".
	 */
	String[] mediaType
	
	/*
	 * Additional overall documentation for the API.
	 */
	contains Document[] documentation
			
	@Ecore(invariant="true")	
	op boolean hasValidProtocols(EDiagnosticChain diagnostics,EMap<Object,Object> context) {
		val invalidValues = protocols.map[it.toLowerCase].filter[it != 'http' && it != 'https']
		invalidValues.forEach[diagnostics.add(new BasicDiagnostic(Diagnostic.ERROR, null, -1, "Invalid protocol " + it, 
			<Object>newArrayList(this)
		))]
		invalidValues.empty
	}
}

interface ApiExtension {
	/**
	 * The api that this object extends.
	 */
	refers Api ^extends
	
	String[1] usage 
}

/**
 * An extension broadens a RAML API definition by adding to, or modifying aspects of its behavior and other functionality. 
 * An extension can be useful in separating a core, broadly-available API from layers of functionality available to more 
 * restricted audiences, for creating variants of an API for somewhat different purposes, or for specifying 
 * instance-specific nodes of an API, such as its service endpoint (URL) without altering its pure 
 * interface definition document.
 */
class Extension extends Api, ApiExtension {
}

class Document {
	/*
	 * Title of the document. Its value MUST be a non-empty string.
	 */
	String[1] title	
	
	/*
	 * Content of the document. 
	 * Its value MUST be a non-empty string and MAY be formatted using markdown.
	 */
	String[1] content
}

interface TypeContainer extends InlineTypeContainer {
	contains LibraryUse[] uses
    
    contains AnyType[] types
    
    /*
     * Returns the type with the given name or null.
     */
    op AnyType getType(String name) {
    	types.findFirst[it.name == name]
    }
    
    contains AnyAnnotationType[] annotationTypes
    
    /*
     * Returns the annotation type with the given name or null. 
     */
    op AnyAnnotationType getAnnotationType(String name) {
    	annotationTypes.findFirst[it.name == name]
    }
    
    contains ResourceType[] resourceTypes
    
    /*
     * Returns the resource type with the given name or null. 
     */
    op ResourceType getResourceType(String name) {
    	resourceTypes.findFirst[it.name == name]	
    }
    
    /*
	 * Declarations of traits for use within this element.
	 */
	contains Trait[] traits	
    
    /*
     * Returns the trait with the given name or null. 
     */
    op Trait getTrait(String name) {
    	traits.findFirst[it.name == name]
    }
}

class Library extends AnnotationsFacet, TypeContainer, SecuritySchemeContainer {
    String[1] usage 
}

class LibraryUse {
	String[1] name
	refers Library library
}