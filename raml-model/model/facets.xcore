@Ecore(nsPrefix="facets",nsURI="http://www.vrap.io/raml/facets")
@GenModel(
    modelDirectory="raml-model/src/main/java-gen",
    complianceLevel="8.0"
)
package io.vrap.rmf.raml.model.facets

import io.vrap.rmf.raml.model.util.RegExp
import com.google.common.net.MediaType

type RegExp wraps RegExp
create {
	RegExp.of(it)	
}

/**
 * An integer that is >= 0.
 */
type UnsignedInteger wraps Integer

/**
 * An integer that is > 0.
 */
type PositiveInteger wraps Integer

type MediaType wraps MediaType
create {
	MediaType.parse(it)	
}

interface EnumFacet {
	/*
     * An enumeration of all the possible values of instances of this type.
     * The value is an array containing representations of these possible values.
     * An instance of this type MUST be equal to one of these values.
     */
	String[] ^enum
}

interface ObjectTypeFacet {
	/*
	 * The minimum number of properties allowed for instances of this type.
	 */
	UnsignedInteger minProperties

	/*
	 * The maximum number of properties allowed for instances of this type.
	 */
	UnsignedInteger maxProperties

	/*
	 * Boolean that indicates if an object instance has additional properties.
	 */
	Boolean additionalProperties = "true"

	/*
	 * Determines the concrete type of an individual object at runtime when, for example,
	 * payloads contain ambiguous types due to unions or inheritance.
	 *
	 * The value must match the name of one of the declared properties of a type.
	 * Unsupported practices are inline type declarations and using discriminator with non-scalar
	 * properties.
	 */
	String discriminator

	/*
	 * Identifies the declaring type. Requires including a discriminator facet in the type declaration.
	 * A valid value is an actual value that might identify the type of an individual object and is
	 * unique in the hierarchy of the type.
	 * Inline type declarations are not supported.
	 */
	String discriminatorValue
}

interface ArrayTypeFacet {
	/*
	 * Boolean value that indicates if items in the array MUST be unique.
	 */
	Boolean uniqueItems

	/*
	 * Minimum amount of items in array. Value MUST be equal to or greater than 0.
	 */
	UnsignedInteger minItems = "0"

	/*
	 * aximum amount of items in array. Value MUST be equal to or greater than 0.
	 */
	UnsignedInteger maxItems = "2147483647"
}

interface StringTypeFacet {
	/*
	 * Regular expression that this string SHOULD match.
	 */
	RegExp pattern

	/*
	 * Minimum length of the string. Value MUST be equal to or greater than 0.
	 */
	UnsignedInteger minLength = "0"

	/*
	 * Maximum length of the string. Value MUST be equal to or greater than 0.
	 */
	UnsignedInteger maxLength = "2147483647"
}

/*
 * This enum defines the format of a number type.
 */
enum NumberFormat {
	int16,
	int8,
	int32,
	int64,

	int,
	long,

	float,
	double
}

interface CommonNumberTypeFacet {
	/*
	 * The format of the value.
	 */
	NumberFormat format

	/*
	 * A numeric instance is valid against "multipleOf" if the result of dividing the instance
	 * by this keyword's value is an integer.
	 */
	PositiveInteger multipleOf		
}

interface NumberTypeFacet extends CommonNumberTypeFacet {
	/*
	 * The minimum value of the parameter. Applicable only to parameters of type number or integer.
	 */
	BigDecimal minimum
	/*
	 * The maximum value of the parameter. Applicable only to parameters of type number or integer.
	 */
	BigDecimal maximum
}

interface IntegerTypeFacet extends CommonNumberTypeFacet {
	/*
	 * The minimum value of the parameter. Applicable only to parameters of type number or integer.
	 */
	Integer minimum
	/*
	 * The maximum value of the parameter. Applicable only to parameters of type number or integer.
	 */
	Integer maximum
}

enum DateTimeFormat {
	rfc3339,
	rfc2616
}

interface DateTimeTypeFacet {
		/*
	 * A timestamp in one of the following formats: if the format is omitted or set to rfc3339,
	 * uses the "date-time" notation of RFC3339; if format is set to rfc2616, uses the format
	 * defined in RFC2616.
	 */
	DateTimeFormat format	
}

interface FileTypeFacet {
	/*
     * A list of valid content-type strings for the file.
     */
    MediaType[] fileTypes

    /*
     * Specifies the minimum number of bytes for a parameter value. The value MUST be equal to or greater than 0.
     */
    UnsignedInteger minLength = "0"

    /*
     * Specifies the maximum number of bytes for a parameter value. The value MUST be equal to or greater than 0.
     */
    UnsignedInteger maxLength = "2147483647"
}

interface Instance {
	op Object getValue()
}

class StringInstance extends Instance {
	String value
}

class BooleanInstance extends Instance {
	Boolean value
}

class NumberInstance extends Instance {
	BigDecimal value
}

class IntegerInstance extends Instance {
	Integer value
}

class ArrayInstance extends Instance {
	contains Instance[] value
}

class ObjectInstance extends Instance {
	contains PropertyValue[] value
}

class PropertyValue {
	String name
	contains Instance value
}

interface ProtocolsFacet {

	/*
	 * The protocols supported by this element.
	 */
	String[] protocols	
}
