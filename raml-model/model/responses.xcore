@Ecore(nsPrefix="responses",nsURI="http://www.vrap.io/raml/responses")
@GenModel(modelDirectory="/raml-model/src/main/java-gen",
    complianceLevel="8.0")
package io.vrap.rmf.raml.model.responses

import org.eclipse.emf.ecore.EDiagnosticChain
import org.eclipse.emf.ecore.EMap
import org.eclipse.emf.common.util.Diagnostic
import org.eclipse.emf.common.util.BasicDiagnostic

import io.vrap.rmf.raml.model.util.ModelHelper
import io.vrap.rmf.raml.model.facets.MediaType
import io.vrap.rmf.raml.model.modules.ApiBase
import io.vrap.rmf.raml.model.types.AnnotationsFacet
import io.vrap.rmf.raml.model.types.HeadersFacet
import io.vrap.rmf.raml.model.types.TypedElement

interface ResponsesFacet {
	/*
	 * Information about the expected responses to a request.
	 */
	contains Response[] responses	
}

class Response extends AnnotationsFacet, HeadersFacet, BodyContainer {
	/*
	 * A possible HTTP status codes for that method on that resource.
	 */
	String statusCode
	
	/*
	 * A substantial, human-friendly description of the type. Its value is a string and MAY be formatted using markdown.
	 */
	String description
}

class Body extends AnnotationsFacet, TypedElement {
	/*
	 * The content types that this body supports.
	 */
	MediaType[] contentTypes
	
	@Ecore(invariant = "true")
	op boolean contentTypesDefined(EDiagnosticChain diagnostics,EMap<Object,Object> context) {
		val api = getRootContainer(false) as ApiBase
		val contentTypesDefined = api == null || api.mediaType.size > 0 || contentTypes.size > 0
		if (!contentTypesDefined) {
			diagnostics.add(new BasicDiagnostic(Diagnostic.ERROR, null, -1, "Content type missing", 
				<Object>newArrayList(this)))		
		} 
		contentTypesDefined
	}
}

interface BodyContainer {
	
	/*
	 * The body types of this element.
	 */
	contains Body[] bodies
		
	/*
	 * Returns the first body with the given content type or null.
	 */
	op Body getBody(String contentType) {
		ModelHelper.getBody(this, contentType)
	}	
}