@Ecore(nsPrefix="resources",nsURI="http://www.vrap.io/raml/resources")
@GenModel(modelDirectory="/raml-model/src/main/java-gen",
    complianceLevel="8.0")
package io.vrap.rmf.raml.model.resources

import io.vrap.rmf.raml.model.facets.ProtocolsFacet

import io.vrap.rmf.raml.model.elements.DocumentableElement

import io.vrap.rmf.raml.model.types.AnnotationsFacet
import io.vrap.rmf.raml.model.types.HeadersFacet
import io.vrap.rmf.raml.model.types.QueryParametersFacet
import io.vrap.rmf.raml.model.types.TypedElement

import io.vrap.rmf.raml.model.security.SecuredByFacet
import io.vrap.rmf.raml.model.elements.IdentifiableElement

import io.vrap.rmf.raml.model.responses.BodyType
import io.vrap.rmf.raml.model.responses.ResponsesFacet
import io.vrap.rmf.raml.model.facets.Instance

class UriTemplate {
	contains UriTemplatePart[] parts	
}

interface UriTemplatePart {
	
}

class UriTemplateLiteral extends UriTemplatePart {
	String literal	
}

class UriTemplateExpression extends UriTemplatePart {
	String operator
	String[] variables 	
}

class UriParameter extends TypedElement {
}

interface ResourceContainer {
	/*
	 * The (sub-) resources that this element contains. 
	 */
	contains Resource[] resources
}

/*
 * The commonalities between {@link Resource} and {@link ResourceType}
 */
interface ResourceBase extends DocumentableElement, AnnotationsFacet, ResourceContainer, SecuredByFacet {
	/*
	 * The uri parameters of this resource.
	 */
	contains UriParameter[] uriParameters
	
	/*
	 * The methods that this resource provides.
	 */
	contains Method[] methods
		
	/*
	 * The resource type that this resource inherits.
	 */
	contains ResourceTypeApplication ^type
	
	/*
	 * Returns the method with the given http method or null if
	 * no method with the given http method exists.
	 */
	op Method getMethod(HttpMethod httpMethod) {
		for (Method method : methods) {
			if (method.method == httpMethod) {
				return method
			}
		}
		return null
	}	
}


class ResourceTypeApplication {
	refers ResourceType ^type
	contains Argument[] arguments 
}

class Resource extends ResourceBase, ResourceContainer {
	/*
	 * The reltaive uri of this resource.
	 */
	contains UriTemplate relativeUri
}

class ResourceType extends ResourceBase, IdentifiableElement {
	String usage
}

enum HttpMethod {
	^get 
	patch
	put
	post
	delete
	head
	options 
}

class Method extends DocumentableElement, AnnotationsFacet, ProtocolsFacet, SecuredByFacet, 
					 HeadersFacet, QueryParametersFacet, ResponsesFacet {
	/*
	 * The HTTP method.
	 */
	HttpMethod method
	
	/*
	 * The body types of this method.
	 */
	contains BodyType[] bodies
	
	/*
	 * A list of the traits to apply to this method.
	 */
	contains TraitApplication[] is
}

class Trait extends IdentifiableElement, Method {
	String usage
}

class Argument {
	String name
	contains Instance value
}

class TraitApplication {
	refers Trait trait
	contains Argument[] arguments 
}