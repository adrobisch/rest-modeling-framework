@Ecore(nsPrefix="resources",nsURI="http://www.vrap.io/raml/resources")
@GenModel(modelDirectory="/raml-model/src/main/java-gen",
    complianceLevel="8.0")
package io.vrap.rmf.raml.model.resources

import io.vrap.rmf.raml.model.facets.ProtocolsFacet

import io.vrap.rmf.raml.model.elements.DocumentableElement

import io.vrap.rmf.raml.model.types.AnnotationsFacet
import io.vrap.rmf.raml.model.types.TypedElement

import io.vrap.rmf.raml.model.security.SecuredByFacet
import io.vrap.rmf.raml.model.elements.IdentifiableElement

class UriTemplate {
	contains UriTemplatePart[] parts	
}

interface UriTemplatePart {
	
}

class UriTemplateLiteral extends UriTemplatePart {
	String literal	
}

class UriTemplateExpression extends UriTemplatePart {
	String operator
	String[] variables 	
}

class UriParameter extends TypedElement {
}

interface ResourceContainer {
	/*
	 * The (sub-) resources that this element contains. 
	 */
	contains Resource[] resources
}

class Resource extends DocumentableElement, AnnotationsFacet, ResourceContainer, SecuredByFacet {
	/*
	 * The reltaive uri of this resource.
	 */
	contains UriTemplate relativeUri
	
	/*
	 * The uri parameters of this resource.
	 */
	contains UriParameter[] uriParameters
	
	/*
	 * The methods that this resource provides.
	 */
	contains Method[] methods
	
	/*
	 * Returns the method with the given http method or null if
	 * no method with the given http method exists.
	 */
	op Method getMethod(HttpMethod httpMethod) {
		for (Method method : methods) {
			if (method.method == httpMethod) {
				return method
			}
		}
		return null
	}
}

enum HttpMethod {
	^get 
	patch
	put
	post
	delete
	head
	options 
}

class Header extends TypedElement {
	
}

interface HeadersFacet {
	/*
	 * Detailed information about any request headers needed by this method.
	 */
	contains Header[] headers	
}

class QueryParameter extends TypedElement {
	
}

interface QueryParametersFacet {
	/*
	 * Detailed information about any query parameters needed by this element. 
	 * Mutually exclusive with queryString.
	 */
	contains QueryParameter[] queryParameters
}

class Method extends DocumentableElement, AnnotationsFacet, ProtocolsFacet, SecuredByFacet, HeadersFacet, QueryParametersFacet {
	/*
	 * The HTTP method.
	 */
	HttpMethod method
	
	/*
	 * The body types of this method.
	 */
	contains BodyType[] bodies
	
	/*
	 * Information about the expected responses to a request.
	 */
	contains Response[] responses
}

class BodyType extends TypedElement {
	/*
	 * The content types that this body supports.
	 */
	String[] contentTypes
}

class Response extends AnnotationsFacet, HeadersFacet {
	/*
	 * A possible HTTP status codes for that method on that resource.
	 */
	String statusCode
	
	/*
	 * A substantial, human-friendly description of the type. Its value is a string and MAY be formatted using markdown.
	 */
	String description
	
		/*
	 * The body types of this response.
	 */
	contains BodyType[] bodies
}

class Trait extends DocumentableElement, AnnotationsFacet, IdentifiableElement, HeadersFacet {
	String usage
}