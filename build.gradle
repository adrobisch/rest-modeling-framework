buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    // Here we define all plugins that are used by subprojects and specify the version for external ones

    id 'idea'
    id 'eclipse'

    id 'maven'
    id 'maven-publish'

    id 'java'
    id 'java-library' // needed to make sure that transitive deps have 'compile' scope
    id 'groovy'

    id 'de.undercouch.download' version '4.0.2'
    id 'com.jfrog.bintray' version '1.8.3'
    id 'com.github.johnrengelman.shadow' version '5.2.0' apply false

    id 'org.xtext.builder' version '2.0.7' apply false
}


import java.text.SimpleDateFormat

def globalVersion = new Version(currentVersion)

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}

apply from: 'dependencies.gradle'

tasks.register("writeVersionToReadme") {
    doLast {
        ant.replaceregexp(match: 'rmfVersion = \"[^\\s]+\"', replace: "rmfVersion = \"${globalVersion}\"", flags:'g', byline:true) {
            fileset(dir: projectDir, includes: 'README.md')
        }
    }
}

subprojects { project ->
    repositories {
        mavenCentral()
    }

    apply plugin: 'publishing'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    apply plugin: 'maven'

    apply plugin: 'java'
    apply plugin: 'java-library' // needed to make sure that transitive deps have 'compile' scope
    apply plugin: 'groovy'

    apply plugin: 'de.undercouch.download'
    apply plugin: 'com.jfrog.bintray'

    group='io.vrap.rmf'
    version=globalVersion

    if (project.file('src/main/antlr').exists()) {
        apply plugin: 'antlr'

        dependencies {
            antlr _antlr.antlr
        }
    }
    if (project.file('model').exists()) {
        apply plugin: 'org.xtext.builder'

        xtext {
            version = xtextVersion

            languages {
                ecore {
                    setup = 'org.eclipse.xtext.ecore.EcoreSupport'
                }
                codegen {
                    setup = 'org.eclipse.emf.codegen.ecore.xtext.GenModelSupport'
                }
                xcore {
                    setup = 'org.eclipse.emf.ecore.xcore.XcoreStandaloneSetup'
                    generator.outlet.producesJava = true
                }
            }
            sourceSets {
                main {
                    srcDir 'model'
                    output {
                        dir(xtext.languages.xcore.generator.outlet, 'src/main/java-gen')
                    }
                }
            }
        }

        dependencies {
            compile 'org.eclipse.platform:org.eclipse.equinox.common:3.8.0'
            compile emf.common
            compile emf.ecore
            compile emf.ecore_xcore_lib
            compile "org.eclipse.xtext:org.eclipse.xtext.xbase.lib:$xtextVersion"

            xtextLanguages 'org.eclipse.jdt:org.eclipse.jdt.core:3.20.0'
            xtextLanguages 'org.eclipse.text:org.eclipse.text:3.5.101'
            xtextLanguages 'org.eclipse.core:org.eclipse.core.resources:3.7.100'
            xtextLanguages "org.eclipse.xtext:org.eclipse.xtext.ecore:$xtextVersion"
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.mwe2.runtime:2.8.3'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen.ecore.xtext:1.2.0'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.common:2.11+'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore:2.11+'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.11+'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore.xcore:1.3.1'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.ecore.xcore.lib:1.1.100'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen:2.11+'
            xtextLanguages 'org.eclipse.emf:org.eclipse.emf.codegen.ecore:2.11+'
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = [ 'Maven' ]

        publish = true

        pkg {
            repo = 'vrapio'
            name = 'rmf'
            userOrg = 'vrapio'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/vrapio/rest-modeling-framework'
        }
    }

    sourceCompatibility = 1.8
}
